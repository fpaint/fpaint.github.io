<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Post on Lab journal</title><link>http://labjournal.weburn.ru/post/</link><description>Recent content in Post on Lab journal</description><generator>Hugo -- gohugo.io</generator><language>ru</language><managingEditor>fpaint@gmail.com (Andrew)</managingEditor><webMaster>fpaint@gmail.com (Andrew)</webMaster><lastBuildDate>Sat, 10 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://labjournal.weburn.ru/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Матчер русских имён</title><link>http://labjournal.weburn.ru/post/2021-07-10-names-matcher/</link><pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate><author>fpaint@gmail.com (Andrew)</author><guid>http://labjournal.weburn.ru/post/2021-07-10-names-matcher/</guid><description>В одном проекте у меня возникла следующая задача: юзер вводит имя-фамилию в поле, а потом это значение надо выгрузить во внешнюю систему раздельно, в одно поле имя, а фамилию в другое. И понятно, что юзер может ввести по разному. Может первым словом имя указать, а может и вторым. Так что банальный split не прокатит. Стали думать, как эту задачу решать, поискали варианты, нашли питоновскую библиотечку natasha со списком из ~7тыс имён, подумывали выдрать список и применить, но в итоге забили и как-то обошлись.</description></item><item><title>Моя методология стилей</title><link>http://labjournal.weburn.ru/post/2021-05-02-css/</link><pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate><author>fpaint@gmail.com (Andrew)</author><guid>http://labjournal.weburn.ru/post/2021-05-02-css/</guid><description>Не знаю почему, для меня это загадка, но в мире существует проблема структурирования CSS. Как организовать стили в большом проекте таким образом, чтобы они были удобными и при изменении на одной странице не портили вёрстку на всех остальных. Для этого даже придумывают разные технологии и методологии. Технологии - типа css-loader, который заменяет имена классов на случайные, чтобы гарантировать локальное использование. Методологии - типа БЭМ и его вариантов, о том как называть классы по единой системе, чтобы их названия никогда не пересекались.</description></item><item><title>module_function</title><link>http://labjournal.weburn.ru/post/2021-04-30-module_function/</link><pubDate>Fri, 30 Apr 2021 00:00:00 +0000</pubDate><author>fpaint@gmail.com (Andrew)</author><guid>http://labjournal.weburn.ru/post/2021-04-30-module_function/</guid><description>Узнал тут о замечательной фишке руби. Оказывается, можно делать модули, которые будут работать подобно классам с чистыми статическими функциями. Но обо всём по порядку.
Итак, в руби сильно ООП. Язык предполагает, что разработчики оформляют код в классы, и если есть какие-то данные, то их следует обернуть классом и обрабатывать методами этого класса, инстанциируя объекты. А модули там вроде как дополнительная фишка, для разграничения неймспейсов и организации миксинов. Чтоб, если какой класс станет слишком большим, можно было бы разнести его по модулям и потом собирать из кусочков.</description></item><item><title>Импорт блога из Blogger в Hugo</title><link>http://labjournal.weburn.ru/post/2019-01-22-blogger-to-hugo/</link><pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate><author>fpaint@gmail.com (Andrew)</author><guid>http://labjournal.weburn.ru/post/2019-01-22-blogger-to-hugo/</guid><description>У меня уже давно было намерение перенести свой самый старый бложик, который я вёл на blogger, в hugo. Первый пост там был ещё в 2007 году, и с тех пор там накопилось ~450 постов. Хоть там и нет ничего особо интересного, просто заметки для себя, однако хотелось всё это сохранить. Для этого я собирался написать скриптик, скачивающий странички, парсящий их и сохраняющий в Markdown. Но всё оказалось проще.
Первым делом, в настройках у blogger есть кнопка для импорта/экспорта блога.</description></item><item><title>Hugo automation</title><link>http://labjournal.weburn.ru/post/2017-12-07-hugo_bash/</link><pubDate>Thu, 07 Dec 2017 00:00:00 +0000</pubDate><author>fpaint@gmail.com (Andrew)</author><guid>http://labjournal.weburn.ru/post/2017-12-07-hugo_bash/</guid><description>Сделал простенький скрипт для создания заготовки поста для этого блога. Для пробы даже создал этот пост. Приведу его код:
#!/bin/sh DATE=$(date +&amp;#34;%F&amp;#34;) FILENAME=$DATE&amp;#34;.md&amp;#34; if $([ -f $FILENAME ]) then echo Post $FILENAME already exists else cat &amp;gt; $FILENAME &amp;lt;&amp;lt;- EOM --- title: &amp;#34;Отчёт о происходящем, $(date +&amp;#34;%d %B %Y&amp;#34;)&amp;#34; date: $DATE draft: true --- EOM echo Post $FILENAME created fi subl $FILENAME Получается удобно, буду пользоваться. Автоматизация рулит.</description></item></channel></rss>